var ScriptDate = "21.04.2019"; // это дата выпуска скрипта, с которым работает этот набор настроек


////>>>>>>>>>   добавить масив расширений, которые не будут оторваны от текста, даже если установлен флажок addSpaceAfterDot

//
// С предыдущими по дате выпуска версиями DoTextOK эти настройки работать не будут.
// 
// 14.03.2019
var theDoubleNames = true; // если true, это значение по умолчанию, то составные собственные слова, Кирилло-Белозерский, Соколов-Микитов, Мусин-Пушкин и пр.
                                            // если будут переноситься, то только по дефису, разделяющему эти слова.
var splitOnHyphen = true; // если true, то слова с дефисами 'военно-патриотический', 'жёлто-оранжевый' и пр. если будут переноситься, то только по дефису, разделяющему эти слова. 
                                         // Условие применения этого правила определяется числом букв в каждом из слов. 
                                         // Минимальное число букв в каждом из пары слов определяется в переменных word1N и word2N, по умолчанию word1N = 5 и word2N = 5.
var  word1N = 5; // минимальное число букв в первом составном слове
var  word2N = 5; // минимальное число букв во втором составном слове

var splitExceptions = ["либо", "нибудь", "таки", "как"]; // вторые части слов с дефисами как указатели на слова, которые не должны переноситься: 'кто-либо', 'когда-нибудь' всегда останутся на одной строке.
                                                                                  // т.к. перед этим двойным словом программа поставит дискреционный перенос.
                                                                                  // Частицу 'то' включать в этот массив не стоит, т.к. могут быть длинные слова, после которых идёт эта частица: "Председатель-то должен был подумать об этом",
                                                                                  // и запрет переноса слова может стать причиной появления неплотной строки.
// 09.02.2019
var hiddenMessageAboutFootnotesPara = false; // стандартно false. Начиная с 07.03.2019 добавлена проверка, нет ли сносок, в которых больше одного абзаца. И если такие сноски будут найдены, 
                                                                        // то в случае, если эта переменная в состянии false будет сообщение, 
                                                                        // что для правильной работы со сносками надо сделать для второго и последующих абзацев отдельный абзацный стиль, 
                                                                        // и указать этот стиль в настройках абзацного стиля для первого абзаца.
                                                                        // Если вы практикуете использование опции "Оформление сноски определяется установками абзацного стиля" и у вас всегда определён абзацный стиль
                                                                        // для последующих абзацев сноски, то можно установить значение этой переменной в true: даже если будут многоабзацные сноски, вам не надо напоминать об этом.

//>Добавлено 27.07.2016>
var mySpaceScale = 75; // Стандартное значение масштаба пробелов вокруг тире. Должно быть указано целое число, от 1 до 99. 100 -- если масштабирование не выполняется. 75 -- это моё предпочтение, у вас, конечно, есть своё понимание, какой ширины должно быть пространство до  и после тире.
//
var sameSpaces = false; // когда true, при выборе любой новой шпации до/после тире соседняя становится такой же
//
// Оптимальные начения межсловных и межбуквенных интервалов и масштаба глифов для кириллицы 
var WordSpacing = "95/100/105";  
var LetterSpacing = "-5/0/5";
var GlyphScaling = "97/100/103";
///
var addSpaceAfterDot = false; // стандартно false, чтобы не ломать имена сайтов. Пробел после точки в 'adobeindesign. ru' сделает эту ссылку битой. 
                                               // Но если в тексте нет адресов сайтов, а есть предложения между которыми нет пробела, то false решит эту проблему
var spaceAfterBracketInList = true; // В списках с номерами или буквами после номера идёт скобка. Потом пробел. И когда такой список оформлен в виде строки, возможна ситуация, 
                                                      // что номер и скобка остались в конце строки, а текст ушёл в начало следующей строки. Значение true -- скрипт заменит пробел после скобки на неразрывный пробел.
var hideMessageAboutNoteProcessing = false; // стандартно false и при щелчке на флажке "Оформление сноски определяется установками абазцного стиля" выводится сообщение "Сноски будут оформлены в соответствии с пользовательскими установками."
                                                                     // Чтобы снять этот вывод, установите эту переменную в true. В этом случае индикатором, что всё идёт правильно, будут отстутствие сообщения и запрещение изменения состояния установленного флажка  "Оформление сноски определяется установками абазцного стиля".
                                                                     // Эта установка действует только на упомянутое выше сообщение. Все остальные выводятся независимо от состояния этой переменной.
var hideUserName = false; // по умолчанию false. Если true, то на флажке "Оформление сноски определяется установками абазцного стиля" не выводится инфорамция о купившем программу
////
var sleepTime = 2000; // число миллисекунд, в течение которых на экране будет держаться сообщение о завершении работы скрипта
////
RemoveCustomColors = false;
// RemoveCustomColors - флажок опции удаления из вёрстки служебных цветов. 
// Если он в состоянии true, все цвета, собранные в массиве myRemovedColors, будут удалены из вёрстки.
// Этой опцией надо пользоваться только тогда, когда вы уверены в её целесообразности.
// Так, при назначении символьных стилей знаки и слова красятся цветом myInfoColor, и это цветовое выделение помогает в процессе вёрстки.
// А работа с математическими формулами предполагает присутствие в вёрстке двух информационых цветов.
// И тем не менее, если есть понимание, что эти цвета не нужны, вот флажок для удаления их. Цвет окрашенных символов станет чёрным.
// Но при этом и в свойствах символьных стилей яркий цвет поменяется на чёрный. И останется таким и после возврата RemoveCustomColors в значение false.
// Для того, чтобы символьные цвета снова стали цветными, после экспериментов с флажком RemoveCustomColors их надо все удалить, чтобы скрипт создал их заново.
var myRemovedColors = ["myInfoColor","myMathFormulaColor","myProcessedFormula","myProblemQuoteColor","myRightYOColor","myProblemYOColor"];
/////////
var nobreakSpaceState = false; // если true, то будет установлен флажок "После обработки заменить изменяемые неразрывные пробелы на обычный пробел с атрибутом 'Без переносов' (Nobreak)") 
var flexNobreakOnly = true; // если true, то в обрабатываемом тексте все фиксированные неразрывные пробелы будут заменены на изменяемые неразрывные пробелы.
///
var spaceForSupChar =false; // = false индекс верхнего регистра идет сразу за числом; = true -- между числом и индексом волосяная шпация (в верхнем регистре)
//////////////////
// 02.10.2015: переменная MustBeWithNextWord называется теперь MustBeWithNextDigit, но скрипт пока помнит предыдущее название
//var MustBeWithNextDigit = "(пп\\.|ст\\.|с\\.|т\\.|п\\.|ч\\.|С\\.|Т\\.|П\\.|Ч\\.|P\\.)";  // P\\.  - это латинская прописная буква, обозначение страницы в библиографических данных на английском языке.
var MustBeWithNextDigit = "(пп\\.|ст\\.|с\\.|т\\.|п\\.|ч\\.|С\\.|Т\\.|П\\.|Ч\\.|P\\.|Быт\\.|Исх\\.|Лев\\.|Чис\\.|Втор\\.|Нав\\.|Суд\\.|Руф\\.|1Цар\\.|2Цар\\.|3Цар\\.|4Цар\\.|1Пар\\.|2Пар\\.|1Ездр\\.|Неем\\.|2Ездр\\.|Тов\\.|Иудиф\\.|Эсф\\.|1Мак\\.|2Мак\\.|3Мак\\.|3Ездр\\.|Иов\\.|Пс\\.|Притч\\.|Еккл\\.|Песн\\.|Прем\\.|Сир\\.|Ис\\.|Иер\\.|Плч\\.|Посл\\.Иер\\.|Вар\\.|Иез\\.|Дан\\.|Ос\\.|Иоил\\.|Ам\\.|Авд\\.|Ион\\.|Мих\\.|Наум\\.Авв\\.|Соф\\.|Агг\\.|Зах\\.|Мал\\.|Мф\\.|Мк\\.|Лк\\.|Ин\\.|Деян\\.|Иак\\.|1Пет\\.|2Пет\\.|1Ин\\.|2Ин\\.|3Ин\\.|Иуд\\.|Рим\\.|1Кор\\.|2Кор\\.|Гал\\.|Еф\\.|Флп\\.|Кол\\.|1Сол\\.2Сол\\.|1Тим\\.|2Тим\\.|Тит\\.|Флм\\.|Евр\\.|Откр\\.)";  // P\\.  - это латинская прописная буква, обозначение страницы в библиографических данных на английском языке.
// Эти сокращения и однобуквенные слова при активной вкладке "Оформление текста" всегда, без выбора пользователя, привязываются неразрывным пробелом к числу после них. Это важно на узких колонках, индизайн сможет втянуть номер в строку с сокращением.
// В этом файле установок есть ещё одна похожая переменная, myWordsBeforeDigit. Но её установки действуют, если только установлен флажок "Неразрывный изменяемый пробел между цифрой и названием месяца/единицей измерения, или между словом и числом".
// Собственно, это важно только при вёрстке узких колонок, когда короткие сокращения строки MustBeWithNextDigit можно и нужно удержать в одной строке, а вот с длинными словами из myWordsBeforeDigit индизайну это может быть проблематично.
// Если вы считаете, что правильнее все сокращения, собранные в переменной MustBeWithNextDigit, хранить в составе переменной "Слова перед цифрой" myWordsBeforeDigit, то это тоже просто сделать.
// 1) надо закомментировать строки 7 и 43, это текущие переменные MustBeWithNextDigit и myWordsBeforeDigit
// 2) удалить две наклонные комментирующие черты в начале строки 44, это вариант переменной myWordsBeforeDigit, объединяющий все эти слова и сокращения, после которых должна идти цифра.
// 
// SpaceLetterNonbreakingSpace -- однобуквенные частицы, которые не будут оторваны от следующего слова [русский, украинский, белорусский языки]
// болгарские однобуквенные предлоги, союзы и частицы: а, в, и, о, с, у, я, (дополнений нет)
var SpaceLetterNonbreakingSpace = "(а|а,|в|и|и,|к|о|с|у|i|i,|і,|і|ў|ў,|з|я|я,|\"О|\"К|\"В|В|И|И,|К|О|С|У|А|Я|Я,|\"И|С|\"З|З|\"Ў|Ў|\"I|\"І|І|I|У|\"У|\"А|А,|А|АО|ООО)";
///
// NonbreakingSpaceLetterSpace - однобуквенные частицы, которые не будут оторваны от предыдущего слова
// для болгарского языка добавляем глагол ‘е’
var NonbreakingSpaceLetterSpace = "(б|ж|е)";
///
// SpaceTwoLetterNonbreakingSpace -- двухбуквенные частицы, которые не будут оторваны от следующего слова  [русский, украинский, белорусский языки]
// болгарские двухбуквенные предлоги, союзы и частицы: да, (де), до, за, из, ли, (ма), на, не, ни, но,  от, па, по, та, (уж), (ха), (че), (ще) - в скобках то, что добавлено к стандартному набору (в начало, включая "Ще")
var SpaceTwoLetterNonbreakingSpace = "(де|Де|ма|Ма|уж|Уж|ха|Ха|че|Че|ще|Ще|не|ни|ні|на|ну|ну,|от|ад|об|аб|из|за|да|да,|но|но,|по|па|се|си|до|да|во|ва|со|са|ко|ка|та|ту|то|те|уж|см\\.|им\\.|ім\\.|Не|Ни|Ні|На|Ну|Ну,|От|Ад|Об|Аб|Из|Да|Да,|Ма|Но|Но,|По|Па|Се|Си|До|Во|Ва|Со|Са|Ко|Ка|Та|Та,|Ту|Ту,|То|То,|Те|Те,|См\\.|Им\\.|Ім\\.|\"Об|\"Аб|це|із|зі|то|та|бо|аж|ой|як|її|Із|Зі|За|По|До|Це|Об|Ко|Та|Ту|То|Те|См.|Ім.|Її)";
///
// NonbreakingSpaceTwoLetterSpace - двухбуквенные частицы, которые не будут оторваны от предыдущего слова [русский, украинский, белорусский языки]
// добавлены болгарские глаголы-частицы (са), (се), (си) 
//var NonbreakingSpaceTwoLetterSpace = "(са|се|си|ли|же|ль|бы|бы,|же,|ст.|лі|би|що|чи)";
var NonbreakingSpaceTwoLetterSpace = "(са|се|си|ли|же|ль|бы|бы,|же,|лі|би|що|чи)";
///
// myUnits -- привязываемые к числу единицы измерений, названия месяцев и др. [названия месяцев: русский, украинский, белорусский языки]
// Привязка выполнится, если установлен флажок "Неразрывный изменяемый пробел между цифрой и названием месяца/единицей измерения, или между словом и числом" 
var myUnits = "(\\d)( )(тыс.|руб|ц/га|г[ ,]|кг|мм|дм|мг|см|м[ \\.,]|м2|год[ ау\\.,|ом]|т|млн|мм2|км2|м3|м3|км|л[ \\.,]|В|А|Вт|W|°C|лет|января|февраля|марта|апреля|мая|июня|июля|августа|сентября|октября|ноября|декабря|студзеня|лютага|сакавіка|красавіка|чэрвеня|ліпеня|жнівеня|верасня|кастрычніка|лістапада|снежня|січня|лютого|березня|квітня|травня|червня|липня|серпня|вересня|жовтня|листопада|грудня|квартал\.|[\\$]|€)";
//var myUnits = "(\\d)( )(.|°C|[\\$]|€)";  // это для решения запретить оставлять число в конце строки
///
// двух- и трёхсловные единицы измерения, скрипт ищет их в случае, если переменная ProcessMultyWordsUnits установлена в значение true и при запуске скрипта установлен флажок "Неразрывный изменяемый пробел между цифрой и названием месяца/единицей измерения, или между словом и числом". 
// В этом случае все пробелы в этих многословных переменных заменяются на неразрывный пробел.
ProcessMultyWordsUnits = true;
var my2WordsUnits = "(\\d|\\l)(\\s)(тыс.|млн\\.*?)( )(Гкал|ккал|км|устройств|эл-тов)";
//var my2WordsUnits = "(\\d|\\l)(\\s)(ст.|тыс.|млн\\.*?)( )(л.|Гкал|ккал|км|устройств|эл-тов)"; // 2 ст. л.
//var my2WordsUnits = "(\\d)(\\s)(тыс.|млн\.*?)( )(Гкал|ккал|км)";
var my3WordsUnits = "(\\d)(\\s)(мм)( )(рт.)( )(ст.)"; // "мм рт. ст." пока не предложено больше ни одной трёхсловной единицы измерения, кроме этой :)  Будут, эту строку изменить не трудно! По образу и подобию предыдущей.
///
// myWordsAfterRomanDigits -- сокращения и слова после римских цифр. Перед ними будет неразрывный пробел
var myWordsAfterRomanDigits = "(в\\.|вв\\.|век|столет)";
///
// myWordsBeforeDigit -- слова, после которых идет цифра
// Привязка выполнится, если установлен флажок "Неразрывный изменяемый пробел между цифрой и названием месяца/единицей измерения, или между словом и числом"
var myWordsBeforeDigit = "([Тт]абл\\.|[Рр]ис\\.|[Тт]ел\\.|[Пп]ункт[ауеыовмих]{0,3}|[Сс]тат[ьяюиеёймх]{2,4}|[Чч]аст[ьиюейямх]{1,3}|[Аа]бзац[ывуаемих]{0,3}|[Пп]риложени[иейям]{1,3}|[Пп]\\.|[Чч]\\.|[Гг]л\\.|[Пп]одп\\.|[Аа]бз\\.|[Сс]т\\.)"; 
//var myWordsBeforeDigit = "([Тт]абл\\.|[Рр]ис\\.|[Тт]ел\\.|[Пп]ункт[ауеыовмих]{0,3}|[Сс]тат[ьяюиеёймх]{2,4}|[Чч]аст[ьиюейямх]{1,3}|[Аа]бзац[ывуаемих]{0,3}|[Пп]риложени\.{1,3}|[Пп]\\.|[Чч]\\.|[Гг]л\\.|[Пп]одп\\.|[Аа]бз\\.|[Сс]т\\.)"; 
//var myWordsBeforeDigit = "([Тт]абл\\.|[Рр]ис\\.|[Тт]ел\\.|[Дд]ом[еуова]{0,2}|[Пп]ункт[ауеыовмих]{0,3}|[Сс]тат[ьяюиеёймх]{2,4}|[Чч]аст[ьиюейямх]{1,3}|[Аа]бзац\.{0,2}|[Пп]риложени[иейям]{1,3})";
///
// греческие буквы от альфы до омеги α-ω, немецкие буквы ä,ö,ü,Ä,Ö,Ü,ß, знаки дробей ¼,½,¾. Предполагается, что они набираются в программе Word, это будут скорее всего символы гарнитуры Times New Roman или Symbol
// var myGrecDeuSpecChars = "([α-ωϕϖäöüÄÖÜß¼½¾⅓⅔⅛⅜⅝⅞])";
var myGrecDeuSpecChars = "([α-ωϕϖäöüÄÖÜß¼½¾⅓⅔⅛⅜⅝⅞ְֱֲֳִֵֶַָֹֺֻּֽ֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇאﭏבגדהוזחטיךכלםמןנסעףפץצקרשתװױײ׳״יִﬞײַﬠﬡﬢﬣﬤﬥﬦﬧﬨ﬩שׁשׂשּׁשּׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּשּתּוֹבֿכֿפֿ])";
//var myGrecDeuSpecChars = "([ְֱֲֳִֵֶַָֹֺֻּֽ֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇאﭏבגדהוזחטיךכלםמןנסעףפץצקרשתװױײ׳״יִﬞײַﬠﬡﬢﬣﬤﬥﬦﬧﬨ﬩שׁשׂשּׁשּׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּשּתּוֹבֿכֿפֿ])";
///
var myUsedGreckFont = "Symbol"; // название шрифта, которым отображаются греческие буквы из набора myGrecDeuSpecChars в переданном на вёрстку тексте
///
// CurrencySigns -- варианты написания названий валют или символов валют, идущие перед значением суммы. Такой формат принят в зарубежных финансовых изданиях и стал часто встречаться у нас.
var CurrencySigns = "USD|RUB|CNY|EUR|€|$|£|¥";
///
// UnitsAndFootnotes -- это перечень сокращений, заканчивающихся точкой. 
// Если после них идет знак сноски, то для них  не будет работать правило, согласно которому при оформлении сносок в текстах на русском языке первым идет слово, потом знак сноски и затем уже точка.
// Этот список сокращений берется в расчёт только при активном флажке "Когда рядом запятая или точка и знак сноски —" и выбранной радиокнопке "...знак сноски перед знаком пунктуации".
var UnitsAndFootnotes = "с.|сек.|мин.|час.|г.|гг.|тыс.|руб.|долл.|км.|м.|дм.|см.|мм.";
///
///
// myProcessedMathSigns -- Символы, которые будут искаться и обрабатываться в математических формулах, по сравнению с  mySearchedMathSigns тут есть и двоеточие; наклонная черта и точка как знак умножения. 
// ПРИ ДОБАВЛЕНИИ СЮДА НОВЫХ МАТЕМАТИЧЕСКИХ ЗНАКОВ НЕ ПОМЕЩАЙТЕ В ЭТУ СТРОКУ ДЕФИС, МИНУС И ТИРЕ: ВСЕ МЫСЛИМЫЕ КОДЫ ЭТИХ 'ЧЁРТОЧЕК', КАК ИХ НАЗЫВАЮТ МАШИНИСТКИ, ДОБАВЛЯЮТСЯ ВО ВРЕМЯ РАБОТЫ СКРИПТА
// Обработанный абзац с формулой будет окрашен цветом 'myProcessedFormula', чтобы он снова случайно не попал на обработку. (это по выбору пользователя - есть флажок включения этой опции)
var myProcessedMathSigns = "·×∙=+:/<>±÷~≈≠≡≤≥⋅";   // первая точка, перед крестиком знака умножения - это код, чаще всего именуемый 'MIDDLE DOT', 
/// Вторая точка, после крестика знака умножения, это символ, часто именуемый  в Times New Roman, Minion Pro и Myriad Pro как 'BULLET OPERATOR'. 
/// Не путайте его со стандартным булитом, помещаемым в вёрстку нажатием клавиш <Alt>+<8> (8 -- на основной клавиатуре, там где размещёны восьмёрка и звёздочка).
/// Последняя точка в этом ряду символов -- код символа "DOT OPERATOR" в гарнитуре Symbol
///
/// myDefaultMathSpace - стандартное значение отбивки математических знаков
var myDefaultMathSpace = 5;
/// Вот используемые шпации и соответствующие им коды:
/// "Волосяная шпация" = 0;  "Обычный пробел" = 1;  "Фиксированный пробел" = 2;  "Неразрывный пробел" = 3;  "Шпация на 1/6 круглой" = 4;  "Тонкая шпация" = 5;  "Шпация на 1/4 круглой" = 6;  "Шпация на 1/3 круглой" = 7;  "Шпация на точку" = 8
/// На всякий случай: Волосяная шпация = 1/24 круглой; Тонкая шпация = 1/8 круглой. Ширина пробела точно не регламентируется, зависит от гарнитуры, в первом приближении она больше 1/4, но меньше 1/3 круглой. 
///
/// Названия переменных
var myDefaultVars = "α-ω|a-z|A-Z|\\d"; // символы для поиска формульных переменных  
// myUserVars -- пользовательские переменные, операнды имеющихся в работе формул. Обычно это любой случай наличия русских букв в операнде формулы. 
// При наличии нескольких формульных переменных они должны тут разделяться вертикальной чертой.
// Если нет пользовательских элементов в формулах, то var myUserVars = "", т.е. если обрабатываются формулы, эта переменная должна быть обязательно объявлена.
var myUserVars = "";
//var myUserVars = "Pв|gтел|gн.б.т|Kдв|Ипсt|ечt|чtб|чtн|Iзад|Kинс|Jтек|Jзад|Jд|τскр|τнп|zл|tо|tп|Т|tр|tс";
///
// >>>> Настройки размеров элементов окна скрипта <<<<
//
// Сейчас такое большое разнообразие размеров экранов компьютеров, что становится проблематичным в скрипте предусмотреть все варианты, влияющие на размеры элементов окон скрипта.
// Но поскольку каждая копия скрипта запускается всякий раз на одной и той же машине, всё можно аккуратно настроить.
//
// Для всех массивов ниже первое число каждого элемента с индексами 1 и выше -- ширина экрана, второе число этого элемента -- ширина таблицы для данной ширины экрана
// Элемент массива с индексом 0 -- значение ширины таблицы, которое будет выбрано, если среди элементов массива на найдена ширина экрана той машины, на которой выполняется срипт
//var HorTabSize = [ 600, "2560, 700", "1600,790", "1680,790", "1920, 790", "1366,770", "1280,750" ]; // ширина вкладки меню 
var HorTabSize = [ 600, "2560, 700", "1600,790", "1680,790", "1920, 790", "1366,770", "1280,750" ]; // ширина вкладки меню 
//
var LeftPanelSize = [ 385, "2560, 485", "1600,574", "1680, 572",  "1920, 573", "1366,555", "1280,530" ]; // ширина левой панели на вкладке работы с запросами 
//
//var ButtonSize = [ 189,"2560, 189", "1600,189", "1680, 189","1920, 189", "1366,185", "1280,185" ]; // ширина кнопок 
var ButtonSize = [ 189,"2560, 184", "1600,184", "1680, 184","1920, 184", "1366,180", "1280,180" ]; // ширина кнопок ||  9/2/2019 - кнопки на 5 пк меньше по ширине
///////////////////////////////
var IndesignRuButtonSize = [ 270, "1920, 190", "2560, 305", "1600, 170", "1680, 150","1366, 175","1280, 165"]; // ширина левой кнопки в справочном окне
//
var ButtonInfoOKSize = [ 130, "1920, 60", "2560, 160", "1600, 70","1680, 110","1366, 70","1280, 75"];  // ширина правой кнопки в справочном окне

///
var InCopyIsUsed =false; 
// = false - когда в технологической цепи вёрстки программа InCopy не задействована. 
// = true - когда есть вероятность попытки обработать статью, которая в данный момент имеет один из статусов, указывающих, что эта статья в цикле обработки программой InCopy
// Все такие статусы, если они есть, отображаются в панели 'Подборки' ('Assignments')

////////////////////
// 17.11.2014
// Маски телефонных номеров, которые могут совпадать с интервалами чисел в обычном тексте. 
// Знак подчеркивания соответствует дефису в телефонном номере
// Устанавливать их в значение true строго при уверенности, что в область обработки попадут именно телефонные номера, а не обычный текст.
var XX_XX = false;
var XXX_XX = false;
var XX_XXX = false;
var XXX_XXX = false;
////////////////////////////////////////////
var ShowPict = true; // если эта переменная false, вместо "CMYK-бабочки" на картинке будет выводиться слово 'Info'. Переменная введена после того, как в одном из обновлений индизайна стали сещаться картинки в боксах.
///
if (typeof TellAboutDoTextOK == "undefined") alert ("Для подготовки текста к вёрстке запустите скрипт DoTextOK.jsx.\nСейчас Вы щелкнули мышкой на файле установок этой программы.","Подготовка текста в вёрстке");
//////
DefaultSpace = 1;  // это индекс шпации, устанавливаемой для отбивок до и после тире при нажатии кнопки "Сброс"                                                               
// Вот варианты индексов шпаций                                                                     
// "Волосяная шпация" = 0;
// "Обычный пробел" = 1; <<<<<<<<<   БУДЕТ УСТАНОВЛЕНО ЭТО ЗНАЧЕНИЕ, ЕСЛИ ПЕРЕМЕННАЯ DefaultSpace БУДЕТ ОПРЕДЕЛЕНА НЕВЕРНО
// "Неразрывный фиксированный пробел" = 2;
// "Неразрывный изменяемый пробел" = 3;
// "Шпация на 1/6 круглой" = 4;
// "Тонкая шпация" = 5;   
// "Шпация на 1/4 круглой"  = 6;
// "Шпация на 1/3 круглой" = 7;
// "Шпация на точку" = 8
// "Полукруглая шпация" = 9
// "Круглая шпация" = 10
DefaultSpaceInDialog = 9; // этот индекс шпации, помещаемой после тире в начале диалога, будет установлен при нажатии кнопки "Сброс". (при ошибке указания этой переменной этот индекс тоже будет равен 9)
///////////////////////
/*
Изменения в мае 2015:

# Про каталог пиктограмм была информация в видео, но в скрипте почему-то это не отразилось. Исправлено.

# Не обрабатываются статьи на блокированных и скрытых слоях

# Переменная //var MustBeWithNextDigit = "( пп\\.| ст\\.| с\\.| т\\.| п\\.| ч\\.| С\\.| Т\\.| П\\.| Ч\\.| P\\.); //  раньше было в конце строки (\\s+)(\\d)"; 
 - расширен ряд сокращений
 - добавлены пробелы перед буквами
 - срабатывает только если после этих сокращений есть цифра  - но эта проверка убрана в скрипт, т.е. записи (\\s+)(\\d) тут уже не нужны
 - добавлено объяснение, в чём различие похожих друг на друга параметров MustBeWithNextDigit и myWordsBeforeDigit, строки 8 и 9
 
# Переменная var myWordsBeforeDigit изменена до неузнаваемости. Теперь она выглядит так:
 - var myWordsBeforeDigit = "([Тт]абл\\.|[Рр]ис\\.|[Тт]ел\\.|пункт[ауеыовмих]{0,3}|стат[ьяюиеёймх]{2,4}|част[ьиюейямх]{1,3})"; 
 - если после любого слова из этой переменной будет цифра или пробел и цифра, то между словом и цифрой будет вставлен неразрывный изменяемый пробел.
 - можно отказаться от переменной MustBeWithNextDigit и объединить слова и сокращения вместе:
 - myWordsBeforeDigit = "([Тт]абл\\.|[Рр]ис\\.|[Тт]ел\\.|пункт[ауеыовмих]{0,3}|стат[ьяюиеёймх]{2,4}|част[ьиюейямх]{1,3}| пп\\.| ст\\.| с\\.| т\\.| п\\.| ч\\.| С\\.| Т\\.| П\\.| Ч\\.| P\\.)";   
 - объяснение вариантов в строках 8-13
 
# Контроль, какой jsx-файл запущен. Если случайно щелкнули мышкой на WordsAndUnits.jsx -- об этом будет сообщение.

# На вкладке шпаций добавлен выбор -- какой неразрывный пробел, переменной длины или фиксированный, будет использоваться для привязки предлогов
 - этот же пробел ставится между римскими буквами и словами переменной myWordsAfterRomanDigits

# Значки валюты перед значением суммы: или слитно, или отбиваются шпацией. Перечень символов валюты в отдельном массиве.
 - в блоке управления отбивками добалась еще одна позиция: "Указание валюты перед числом".  
  - знаки валют собраны в переменной CurrencySigns = "USD|RUB|CNY|EUR|€|$|£|¥" -- это варианты написания названий валют или символов валют, идущие перед значением суммы. 
    Такой формат принят в зарубежных финансовых изданиях и стал часто встречаться у нас.
    
# Для записи знаков доллара и евро после суммы эти два значка добавлены в перечень myUnits. Важно, что перед знаком доллара должно быть две обратных наклонных черты.

*/   
/////////////////////////////////////////////////

